# -*- mode: org; -*-
#+INCLUDE: theme/style.org 
#+TITLE: Emacs on Microsoft Windows 
#+KEYWORDS: emacs, shell, eshell, windows, microsoft, cmd.exe 
#+STARTUP: content 

* Emacs on Microsoft Windows 
** Overview 

*Why Emacs ?* 

Emacs provides many useful tools for Windows developers or anyone that
have to use Windows for professional reasons or use Windows at work
such as:

 - _Powerful terminal emulator_: Emacs can be a powerful terminal
   emulator for Windows and a outstanding replacement for cmd.exe
   terminal emulator because it has history, multi line history and
   multi line input and tiling windows where it is possible to split
   the Emacs window and run a repl and edit a file on the same
   window. Unlike cmd.exe Emacs can also run multiple REPLs in the
   same window.

 - _Run any shell_: Emacs can run any shell application like Python,
   IPython, Powershell, cmd.exe, bash, C# shell, F# and so on.

 - _Eshell_: Eshell is unix-like shell implemented in Elisp providing
   many unix commands like ls, mv, cp, rm without any external
   dependencies and it is also highly integrated to Emacs allowing the
   user to call elisp functions, browser directories, open files
   (visit buffer).

 - _Dired mode_: Dired mode allows fast directory navigation and to
   run commands or apply shell commands on files like md5sum, rm -rf,
   git add and so on.

** Getting Emacs and Useful tools
*** Getting Emacs

Emacs 32 bits

 - https://ftp.gnu.org/gnu/emacs/windows/

Emacs 64 bits - 64-Bit GNU Emacs for MS Windows with optimization. 

 - https://sourceforge.net/projects/emacsbinw64/

Install using Chocolately Package Manager 

 - https://chocolatey.org/packages?q=emacs 

Emacs 64 bits unnoficial

 - https://chocolatey.org/packages/emacs64

#+BEGIN_SRC sh
choco install emacs64
#+END_SRC

*** Getting Unix utilities 

Git for Windows provides many Unix utilities ported for Windows like
awk, cat, ls, chown, grep, find and etc.

 - https://git-scm.com/download/win

#+BEGIN_SRC 
c:/Program Files/Git/usr/bin $ ls -l *.exe
-rwxrwxrwx   1 Administrators None        65017 2016-03-18 16:40 [.exe
-rwxrwxrwx   1 Administrators None        28991 2016-03-18 16:40 arch.exe
-rwxrwxrwx   1 Administrators None       581408 2015-05-21  2015 awk.exe
-rwxrwxrwx   1 Administrators None        37712 2016-03-18 16:40 base32.exe
-rwxrwxrwx   1 Administrators None        37712 2016-03-18 16:40 base64.exe
-rwxrwxrwx   1 Administrators None        30078 2016-03-18 16:40 basename.exe
-rwxrwxrwx   1 Administrators None      2063362 2016-07-13 16:00 bash.exe
-rwxrwxrwx   1 Administrators None        89618 2014-11-04  2014 bunzip2.exe
-rwxrwxrwx   1 Administrators None        89618 2014-11-04  2014 bzcat.exe
-rwxrwxrwx   1 Administrators None        89618 2014-11-04  2014 bzip2.exe
-rwxrwxrwx   1 Administrators None        14686 2014-11-04  2014 bzip2recover.exe
-rwxrwxrwx   1 Administrators None        74003 2016-03-01 17:15 captoinfo.exe
-rwxrwxrwx   1 Administrators None        51896 2016-03-18 16:40 cat.exe
-rwxrwxrwx   1 Administrators None        55848 2016-03-18 16:40 chcon.exe

...

-rwxrwxrwx   1 Administrators None       128615 2016-03-18 16:40 vdir.exe
-rwxrwxrwx   1 Administrators None      2335971 2016-04-09 11:08 view.exe
-rwxrwxrwx   1 Administrators None      2335971 2016-04-09 11:08 vim.exe
-rwxrwxrwx   1 Administrators None      2335971 2016-04-09 11:08 vimdiff.exe
-rwxrwxrwx   1 Administrators None        42100 2016-03-18 16:40 wc.exe
-rwxrwxrwx   1 Administrators None        29553 2015-07-20  2015 which.exe
-rwxrwxrwx   1 Administrators None        63429 2016-03-18 16:40 who.exe
-rwxrwxrwx   1 Administrators None        28054 2016-03-18 16:40 whoami.exe
-rwxrwxrwx   1 Administrators None       975360 2016-05-16 14:32 winpty-agent.exe
-rwxrwxrwx   1 Administrators None        41984 2016-05-16 14:32 winpty-debugserver.exe
-rwxrwxrwx   1 Administrators None       747008 2016-05-16 14:32 winpty.exe
-rwxrwxrwx   1 Administrators None        64058 2016-01-20 15:17 xargs.exe
-rwxrwxrwx   1 Administrators None        25299 2016-03-29 14:28 xmlwf.exe
-rwxrwxrwx   1 Administrators None        18954 2016-04-09 11:08 xxd.exe
-rwxrwxrwx   1 Administrators None        28580 2016-03-18 16:40 yes.exe
-rwxrwxrwx   1 Administrators None       173708 2014-11-04  2014 zipinfo.exe
#+END_SRC

GNU Make is an useful build-automation tool and can be got from:

 - https://chocolatey.org/packages/make/3.81.4
 
#+BEGIN_SRC 
$ choco install make
#+END_SRC

** Set Environments Variables 
*** Set HOME 

The HOME environment variable that has the default value
_/home/<username>)_ on Linux sets the user's directory path.

This variable, which is equivalent to  _%USERPROFILE% _(~C:\\Users\<username>~ ) 
is expected to be set by many Unix applications ported to Windows and it
also makes directory browser in Emacs and shells easier. 

#+BEGIN_SRC bat 
C:\Users\arch>echo %USERPROFILE%
C:\Users\arch
#+END_SRC

It can be set permanently by using the commmand below on cmd.exe shell.

#+BEGIN_SRC bat
setx HOME %USERPROFILE%
#+END_SRC

To test if the variable is set. Open a new cmd.exe shell and type:

#+BEGIN_SRC bat 
C:\Users\arch>echo %HOME%
C:\Users\arch
#+END_SRC

*It allows to browser Windows directories as:*

|------------+-------------------------|
| ~          | C:\Users\arch           |
| ~/Desktop  | C:\Users\arch\Documents |
| ~/.emacs.d | C:\Users\arch\.emacs.d  |


*It also allows the commands:*

To open file _~/.emac.d/init.el_  (C:\Users\arch\.emacs.d\init.el)

 - C-x C-f find-file ~/.emac.d/init.el 

To open directory (C:\Users\arch\Desktop)

 - C-x C-d ~/Desktop 

*** Set PATH

Executables located in directories listed in PATH environment variable
can be invoked without its full path like ls, echo and who in
Unix-like OS or ipconfig, arp and whoami in Windows.

#+BEGIN_SRC bat
C:\Users\arch\bin>echo %PATH%
C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem...
#+END_SRC

By adding the directory ~/bin or C:\Users\<user>\bin to PATH variable
it makes easir to call command line applications from this directory
without specifing its full path from Emacs or shell (cmd.exe). It can
be done with:

 - Add the directory C:\Users\<user>\bin to %PATH% enviroment variable: 

#+BEGIN_SRC bat 
 setx PATH "%PATH%;%USERPROFILE%\bin"
#+END_SRC 

It makes easeir to call C:\Users\<user>\bin\curl.exe from any
directory. Instead of write its full path the user can just run =$
curl.exe= or =$ curl=.

** Unix utilities 

You can bash install with Chocolately package manager or download GIT
version control app that comes bundled with bash and Unix utilities
like grep, mv, ssh, df and dd.

Command to run Bash. Usage: M-x run-bash 

#+BEGIN_SRC elisp 
(defun run-bash ()
      (interactive)
      (let ((shell-file-name "C:\\Program Files\\Git\\bin\\bash.exe"))
            (shell "*bash*")))
#+END_SRC


Command to run cmd.exe. Usage: M-x run-cmdexe 

#+BEGIN_SRC elisp 
(defun run-cmdexe ()
      (interactive)
      (let ((shell-file-name "cmd.exe"))
            (shell "*cmd.exe*")))
#+END_SRC

** Environment Variables in Emacs

To run Unix utilities and other command lines apps in Emacs add to the
PATH system environment variable the path to their directories like this:


#+BEGIN_SRC elisp 
(setenv  "PATH" (concat

		;; "c:/Windows/System32" ";" 
		 
		 "c:/Windows/Microsoft.NET/Framework/v4.0.30319" ";"
		 
		 "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319" ";"
		 
		 ;; Unix tools 
		 "C:\\Program Files\\Git\\usr\\bin" ";"

		 ;; User binary files 
		 "C:\\User\\arch\\bin" ";"
		 
		 ;; Mono Installation.
		 "c:\\Program Files\\Mono\\bin" ";"

		 "c:\\Program Files\\Mono\\lib\\mono\\4.5" ";"
		 
		 (getenv "PATH")

         ))
#+END_SRC

** Eshell 
*** Overview 

Eshell provides many benefits to Windows users: 

 - Many unix like commands implemented on Emacs' Lisp like: mv, cp, which ...

 - Completion

 - History: C-c C-l 

 - Easy copy and paste unlike cmd.exe

 - Integration with Eamcs since it can run Emacs commands (interactive
   functions) like shell commands.

*** Screenshots

file:images/eshell-windows-demo1.png

*** Demonstrations
**** Commands and history 

To open the history type: C-c C-l 

file:images/eshell-windows-demo1.gif

**** Emacs Integration 

# http://i.imgur.com/0kVYnXO.gif

Eshell can run Emacs elisp commands (interactive functions) like
find-file, dired as ordinary shell commands like is shown above. 

The function _find-file_ can be executed in eshell as shell command
=find-file ~/.emacs.d/init.el= .

#+BEGIN_SRC elisp
(find-file "~/.emacs.d/init.el")
#+END_SRC

Some useful Elisp commands on Eshell:

Open file:

 - find-file
 - find-file-other-window
 - find-file-other-frame 

Open directory:

 - dired
 - dired-other-window 
 - dired-other-frame

**** Asyncrhonous Commands 

#+BEGIN_SRC 
~/Desktop $ notepad.exe &
#+END_SRC

**** Copy command output to clibpoard 

Eshell comes with a pseudo clipboard device /dev/kill that is useful
to handle clipboard.


*Copy command output to clibpboard*

#+BEGIN_SRC sh
~/Desktop $ ipconfig.exe > /dev/kill
#+END_SRC

*Show clibpoard content*

**** Shell Commands mixed with Emacs commands 

Note: split-string Is an Emacs function.

*Example 1:*

#+BEGIN_SRC sh
~/Desktop $ split-string $PATH ";" 

(#("C:/Program Files (x86)/Microsoft SDKs/F#/4.0/Framework/v4.0" 0 59
   (escaped t))
 #("c:/Windows/System32" 0 19
   (escaped t))
 #("c:/Windows/Microsoft.NET/Framework/v4.0.30319" 0 45
   (escaped t))
 #("C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319" 0 45
   (escaped t))
 #("C:\\Program Files\\Git\\usr\\bin" 0 28
   (escaped t))
 #("C:\\User\\arch\\bin" 0 16
   (escaped t))
 #("c:\\Program Files\\Mono\\bin" 0 25
   (escaped t))
 #("c:\\Program Files\\Mono\\lib\\mono\\4.5" 0 34
   (escaped t))
 "")
~/Desktop $ 
#+END_SRC


*Exmaple 2:*

#+BEGIN_SRC sh 
~/Desktop $ for m in {split-string $PATH ";"} {echo $m}

C:/Program Files (x86)/Microsoft SDKs/F#/4.0/Framework/v4.0
c:/Windows/System32
c:/Windows/Microsoft.NET/Framework/v4.0.30319
C:\Windows\Microsoft.NET\Framework\v4.0.30319
C:\Program Files\Git\usr\bin
C:\User\arch\bin
c:\Program Files\Mono\bin
c:\Program Files\Mono\lib\mono\4.5
~/Desktop $ 
#+END_SRC


*Example 3:*

#+BEGIN_SRC sh
~/Desktop $ for m in $load-path { echo $m}

e:/projects/org-wiki
~/.emacs.d/packages
c:/Users/arch/.emacs.d/elpa/csharp-mode-20160901.319
c:/Users/arch/.emacs.d/elpa/fsharp-mode-20160719.315
c:/Users/arch/.emacs.d/elpa/flycheck-20160817.321
c:/Users/arch/.emacs.d/elpa/company-quickhelp-20160211.718
c:/Users/arch/.emacs.d/elpa/company-20160730.1516
c:/Users/arch/.emacs.d/elpa/helm-anything-20141126.231
c:/Users/arch/.emacs.d/elpa/anything-20160822.1852
c:/Users/arch/.emacs.d/elpa/helm-20160824.745
...
#+END_SRC

** Powershell 

This command runs Powershell on Emacs:

#+BEGIN_SRC elisp 
(defun run-powershell ()
  "Run powershell"
  (interactive)
  (async-shell-command "c:/windows/system32/WindowsPowerShell/v1.0/powershell.exe -Command -"
		       nil
		       nil)
  )
#+END_SRC

Usage: M-x run-powershell. 
